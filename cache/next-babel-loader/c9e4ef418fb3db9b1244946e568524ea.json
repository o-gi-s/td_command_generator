{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from \"next/head\";\nimport React, { useState } from 'react';\nimport { Box, Button } from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\nimport { TextFieldTd } from \"../components/atoms/TextFieldTd\";\nimport packageJson from \"../package.json\";\nexport default function Home() {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    inputVal: \"\",\n    resultVal: \"\"\n  });\n\n  const createCommand = val => {\n    const lines = val.split(\"\\n\");\n    const commands = lines.map(version => {\n      return `git tag -d ${version}; git push origin :${version};`;\n    });\n    return commands.join(\" \");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"TD command generator\")), __jsx(Box, {\n    textAlign: \"center\"\n  }, __jsx(Box, {\n    mb: \"200px\"\n  }), __jsx(Typography, {\n    variant: \"h5\"\n  }, \"TD command generator\"), __jsx(Typography, {\n    variant: \"subtitle1\"\n  }, packageJson.version), __jsx(Box, {\n    mb: \"30px\"\n  }), __jsx(Typography, {\n    variant: \"caption\"\n  }, \"git\\u3067\\u30BF\\u30B0\\u3092\\u4E00\\u6C17\\u306B\\u6D88\\u3057\\u305F\\u3044\\u3068\\u304D\\u306B\\u3002\", __jsx(\"br\", null), \"\\u30ED\\u30FC\\u30AB\\u30EB\\u3067\\u6D88\\u53BB\\u3057\\u305F\\u3042\\u3068\\u306B\\u30EA\\u30E2\\u30FC\\u30C8\\u3082\\u6D88\\u3059\\u30B3\\u30DE\\u30F3\\u30C9\\u3092\\u751F\\u6210\\u3057\\u307E\\u3059\\u3002\"), __jsx(Box, {\n    mb: \"30px\"\n  }), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\"\n  }, __jsx(Box, null, __jsx(TextFieldTd, {\n    placeholder: __jsx(React.Fragment, null, \"v0.0.1\", __jsx(\"br\", null), \"v0.0.2\"),\n    onChange: value => {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        inputVal: value\n      }));\n    }\n  }), __jsx(Box, {\n    mb: \"30px\"\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => {\n      const isEmpty = !state.inputVal || !state.inputVal.match(/\\S/g);\n      if (isEmpty) return;\n      const resultVal = createCommand(state.inputVal);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        resultVal\n      }));\n    }\n  }, \"Export\")), __jsx(Box, {\n    width: \"30px\"\n  }), __jsx(Box, null, __jsx(TextFieldTd, {\n    defaultValue: state.resultVal\n  }), __jsx(Box, {\n    mb: \"30px\"\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => {\n      if (!navigator.clipboard) return;\n      navigator.clipboard.writeText(state.resultVal);\n    }\n  }, \"\\u7D50\\u679C\\u3092\\u30B3\\u30D4\\u30FC\")))));\n}","map":null,"metadata":{},"sourceType":"module"}